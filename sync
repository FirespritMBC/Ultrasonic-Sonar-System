library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.MATH_REAL.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.std_logic_unsigned.ALL;
entity sync is
Generic(
    count_max : integer := 2000000; --50 Hz clock for SG-90
    duty_max : integer := 240000; -- 2 ms duty cycle for +90 degree
    duty_min : integer := 60000; -- 1 ms duty cycle for -90 degree
    duty_delta : integer := 500 
    );
Port(clk_25: in std_logic;
     hsync, vsync: out std_logic;
     R,G,B: out std_logic_vector(3 downto 0);
     trig: out std_logic_vector(1 downto 0);
     echo: in std_logic_vector(1 downto 0);
     reset : IN  STD_LOGIC;
     servom : OUT STD_LOGIC;
     clk_100: in std_logic
     );
end sync;
architecture Behavioral of sync is
component ultrasonic1
Port (clk: in STD_LOGIC;
      trig: out STD_LOGIC;
      echo: in STD_LOGIC;
      clr: in STD_LOGIC;
      echo_time :inout integer;
      motor: out STD_LOGIC_VECTOR(1 downto 0));
end component;

component ultrasonic2
  Port (clk: in STD_LOGIC;
        trig: out STD_LOGIC;
        echo: in STD_LOGIC;
        clr: in STD_LOGIC;
        echo_timer :inout integer:= 0;
        motorr: out STD_LOGIC_VECTOR(1 downto 0));
end component;
signal hpos: integer range 0 to 799 :=0;
signal vpos: integer range 0 to 524 :=0;
signal clr: std_logic;
signal motor: std_logic_vector(1 downto 0);
signal motorr: std_logic_vector(1 downto 0);
signal echo_time: integer:=0;
signal echo_timer: integer:=0;
signal counter_detect: integer range 0 to count_max := 0;
signal counter_eliminate: integer range 0 to count_max :=0;
signal duty : integer range duty_min to duty_max := duty_min;
begin
uut: ultrasonic1 Port Map(clk => clk_25, trig => trig(1), echo => echo(1), clr => clr, echo_time => echo_time, motor => motor);
uut1: ultrasonic2 Port Map(clk => clk_25, trig => trig(0), echo => echo(0), clr => clr, echo_timer => echo_timer, motorr => motorr);

rotation_controller: process(clk_100,duty,counter_detect)
variable positive_rotate : boolean := true;
begin 
if rising_edge(clk_100) then  
  if counter_detect < count_max and counter_eliminate < count_max then
    counter_detect <= counter_detect + 1;
    counter_eliminate <= counter_eliminate +1;
  else 
    if positive_rotate then
      if duty < duty_max then
        duty <= duty + duty_delta;
      else
        positive_rotate := false;
      end if;  
    else
      if duty > duty_min then
        duty <= duty - duty_delta;
      else
        positive_rotate := true;
      end if;
    end if;
    counter_detect <= 0;
    counter_eliminate <= 0;
  end if;
end if;
if counter_detect < duty then
  servom <= '1';
else
  servom <= '0';
end if;
end process;

process(reset,clk_25)
begin
if rising_edge(clk_25) then --25 ti
    if (hpos-479)**2+(vpos-284)**2 < 40000 and (hpos-479)**2+(vpos-284)**2 > 39024 then
        R <= "0000";
        G <= "0111";
        B <= "0000";
    elsif (hpos-479)**2+(vpos-284)**2 < 25600 and (hpos-479)**2+(vpos-284)**2 > 24964 then
        R <= "0000";
        G <= "0111";
        B <= "0000";
    elsif (hpos-479)**2+(vpos-284)**2 < 14400 and (hpos-479)**2+(vpos-284)**2 > 13924 then
        R <= "0000";
        G <= "0111";
        B <= "0000";
    elsif (hpos-479)**2+(vpos-284)**2 < 6400 and (hpos-479)**2+(vpos-284)**2 > 6084 then
        R <= "0000";
        G <= "0111";
        B <= "0000";
    elsif (hpos-479)**2+(vpos-284)**2 < 1600 and (hpos-479)**2+(vpos-284)**2 > 1444 then
        R <= "0000";
        G <= "0111";
        B <= "0000";
    elsif hpos = 479 and vpos = 284 then
        R <= "0000";
        G <= "0111";
        B <= "0000"; 
    else
        R <= "0000";
        G <= "0000";
        B <= "0000";
    end if;
---------------------------------------
if duty >= duty_min and duty < duty_min+30*duty_delta then
  if motor = "11" and (hpos-479-integer(echo_time/323))**2+(vpos-284)**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479-integer(echo_time/323))**2+(vpos-284)**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479+integer(echo_timer/323))**2+(vpos-284)**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479+integer(echo_timer/323))**2+(vpos-284)**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
elsif duty >= duty_min+30*duty_delta and duty < duty_min+60*duty_delta then
  if motor = "11" and (hpos-479-integer(echo_time/323))**2+(vpos-284+integer(echo_time/1207))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479-integer(echo_time/323))**2+(vpos-284+integer(echo_time/1207))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479+integer(echo_timer/323))**2+(vpos-284-integer(echo_timer/1207))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479+integer(echo_timer/323))**2+(vpos-284-integer(echo_timer/1207))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
elsif duty >= duty_min+60*duty_delta and duty < duty_min+90*duty_delta then
  if motor = "11" and (hpos-479-integer(echo_time/360))**2+(vpos-284+integer(echo_time/625))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479-integer(echo_time/360))**2+(vpos-284+integer(echo_time/625))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479+integer(echo_timer/360))**2+(vpos-284-integer(echo_timer/625))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479+integer(echo_timer/360))**2+(vpos-284-integer(echo_timer/625))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
elsif duty >= duty_min+90*duty_delta and duty < duty_min+120*duty_delta then
  if motor = "11" and (hpos-479-integer(echo_time/441))**2+(vpos-284+integer(echo_time/441))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479-integer(echo_time/441))**2+(vpos-284+integer(echo_time/441))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479+integer(echo_timer/441))**2+(vpos-284-integer(echo_timer/441))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479+integer(echo_timer/441))**2+(vpos-284-integer(echo_timer/441))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
elsif duty >= duty_min+120*duty_delta and duty < duty_min+150*duty_delta then
  if motor = "11" and (hpos-479-integer(echo_time/624))**2+(vpos-284+integer(echo_time/360))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479-integer(echo_time/624))**2+(vpos-284+integer(echo_time/360))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479+integer(echo_timer/624))**2+(vpos-284-integer(echo_timer/360))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479+integer(echo_timer/624))**2+(vpos-284-integer(echo_timer/360))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
elsif duty >= duty_min+150*duty_delta and duty < duty_min+180*duty_delta then
  if motor = "11" and (hpos-479-integer(echo_time/1207))**2+(vpos-284+integer(echo_time/323))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479-integer(echo_time/1207))**2+(vpos-284+integer(echo_time/323))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479+integer(echo_timer/1207))**2+(vpos-284-integer(echo_timer/323))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479+integer(echo_timer/1207))**2+(vpos-284-integer(echo_timer/323))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
elsif duty >= duty_min+180*duty_delta and duty < duty_min+210*duty_delta then
  if motor = "11" and (hpos-479)**2+(vpos-284+integer(echo_time/323))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479)**2+(vpos-284+integer(echo_time/323))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479)**2+(vpos-284-integer(echo_timer/323))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479)**2+(vpos-284-integer(echo_timer/323))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
elsif duty >= duty_min+210*duty_delta and duty < duty_min+240*duty_delta then
  if motor = "11" and (hpos-479+integer(echo_time/1207))**2+(vpos-284+integer(echo_time/323))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479+integer(echo_time/1207))**2+(vpos-284+integer(echo_time/323))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479-integer(echo_timer/1207))**2+(vpos-284-integer(echo_timer/323))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479-integer(echo_timer/1207))**2+(vpos-284-integer(echo_timer/323))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
elsif duty >= duty_min+240*duty_delta and duty < duty_min+270*duty_delta then
  if motor = "11" and (hpos-479+integer(echo_time/625))**2+(vpos-284+integer(echo_time/360))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479+integer(echo_time/625))**2+(vpos-284+integer(echo_time/360))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479-integer(echo_timer/625))**2+(vpos-284-integer(echo_timer/360))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479-integer(echo_timer/625))**2+(vpos-284-integer(echo_timer/360))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
elsif duty >= duty_min+270*duty_delta and duty < duty_min+300*duty_delta then
  if motor = "11" and (hpos-479+integer(echo_time/441))**2+(vpos-284+integer(echo_time/441))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479+integer(echo_time/441))**2+(vpos-284+integer(echo_time/441))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479-integer(echo_timer/441))**2+(vpos-284-integer(echo_timer/441))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479-integer(echo_timer/441))**2+(vpos-284-integer(echo_timer/441))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
elsif duty >= duty_min+300*duty_delta and duty < duty_min+330*duty_delta then
  if motor = "11" and (hpos-479+integer(echo_time/360))**2+(vpos-284+integer(echo_time/625))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479+integer(echo_time/360))**2+(vpos-284+integer(echo_time/625))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479-integer(echo_timer/360))**2+(vpos-284-integer(echo_timer/625))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479-integer(echo_timer/360))**2+(vpos-284-integer(echo_timer/625))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
elsif duty >= duty_min+330*duty_delta and duty < duty_min+360*duty_delta then
  if motor = "11" and (hpos-479+integer(echo_time/323))**2+(vpos-284+integer(echo_time/1207))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motor = "01" and (hpos-479+integer(echo_time/323))**2+(vpos-284+integer(echo_time/1207))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if; 
  if motorr = "11" and (hpos-479-integer(echo_timer/323))**2+(vpos-284-integer(echo_timer/1207))**2 < 25 then
    R <= "1111";
    G <= "0000";
    B <= "0000";
  elsif motorr = "01" and (hpos-479-integer(echo_timer/323))**2+(vpos-284-integer(echo_timer/1207))**2 < 25  then
    R <= "0000";
    G <= "1111";
    B <= "0000";
  end if;
end if;
-----------------------
    if (hpos < 799) then
        hpos <= hpos + 1;
    else
        hpos <= 0;
        if (vpos < 524) then
            vpos <= vpos + 1;
        else
            vpos <= 0;
        end if;
    end if;
----------------------------------
    if (hpos > 16 and hpos < 112) then
        hsync <= '0';
    else
        hsync <= '1';
    end if;

    if (vpos > 9 and vpos < 12) then
        vsync <= '0';
    else
        vsync <= '1';
    end if;
end if;
----------------------------------
end process;
end Behavioral;
